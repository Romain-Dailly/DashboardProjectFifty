<?php
/**
 * PlanningEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fifty Truck API
 *
 * This is the API of fifty truck
 *
 * OpenAPI spec version: 0.1.0
 * Contact: contact@fiftytruck.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PlanningEvent Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlanningEvent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PlanningEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'planning_id' => 'int',
        'date_from' => '\DateTime',
        'date_to' => '\DateTime',
        'affrete' => 'string',
        'driver' => 'string',
        'truck' => 'string',
        'trailer' => 'string',
        'resource' => '\Swagger\Client\Model\SearchMetadataResource',
        'loading_in_linear_meter' => 'float',
        'weight_in_ton' => 'float',
        'client' => 'string',
        'from_postcode' => 'string',
        'from_city' => 'string',
        'from_country' => 'string',
        'from_gps_coordinates' => '\Swagger\Client\Model\GeoJsonPoint',
        'to_postcode' => 'string',
        'to_city' => 'string',
        'to_country' => 'string',
        'to_gps_coordinates' => '\Swagger\Client\Model\GeoJsonPoint',
        'empty_space' => 'float',
        'is_empty_space_known' => 'bool',
        'duration' => 'float',
        'start_at' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'planning_id' => 'int64',
        'date_from' => 'date-time',
        'date_to' => 'date-time',
        'affrete' => null,
        'driver' => null,
        'truck' => null,
        'trailer' => null,
        'resource' => null,
        'loading_in_linear_meter' => 'float',
        'weight_in_ton' => 'float',
        'client' => null,
        'from_postcode' => null,
        'from_city' => null,
        'from_country' => null,
        'from_gps_coordinates' => null,
        'to_postcode' => null,
        'to_city' => null,
        'to_country' => null,
        'to_gps_coordinates' => null,
        'empty_space' => 'float',
        'is_empty_space_known' => null,
        'duration' => 'float',
        'start_at' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'planning_id' => 'planningId',
        'date_from' => 'dateFrom',
        'date_to' => 'dateTo',
        'affrete' => 'affrete',
        'driver' => 'driver',
        'truck' => 'truck',
        'trailer' => 'trailer',
        'resource' => 'resource',
        'loading_in_linear_meter' => 'loadingInLinearMeter',
        'weight_in_ton' => 'weightInTon',
        'client' => 'client',
        'from_postcode' => 'fromPostcode',
        'from_city' => 'fromCity',
        'from_country' => 'fromCountry',
        'from_gps_coordinates' => 'fromGpsCoordinates',
        'to_postcode' => 'toPostcode',
        'to_city' => 'toCity',
        'to_country' => 'toCountry',
        'to_gps_coordinates' => 'toGpsCoordinates',
        'empty_space' => 'emptySpace',
        'is_empty_space_known' => 'isEmptySpaceKnown',
        'duration' => 'duration',
        'start_at' => 'startAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'planning_id' => 'setPlanningId',
        'date_from' => 'setDateFrom',
        'date_to' => 'setDateTo',
        'affrete' => 'setAffrete',
        'driver' => 'setDriver',
        'truck' => 'setTruck',
        'trailer' => 'setTrailer',
        'resource' => 'setResource',
        'loading_in_linear_meter' => 'setLoadingInLinearMeter',
        'weight_in_ton' => 'setWeightInTon',
        'client' => 'setClient',
        'from_postcode' => 'setFromPostcode',
        'from_city' => 'setFromCity',
        'from_country' => 'setFromCountry',
        'from_gps_coordinates' => 'setFromGpsCoordinates',
        'to_postcode' => 'setToPostcode',
        'to_city' => 'setToCity',
        'to_country' => 'setToCountry',
        'to_gps_coordinates' => 'setToGpsCoordinates',
        'empty_space' => 'setEmptySpace',
        'is_empty_space_known' => 'setIsEmptySpaceKnown',
        'duration' => 'setDuration',
        'start_at' => 'setStartAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'planning_id' => 'getPlanningId',
        'date_from' => 'getDateFrom',
        'date_to' => 'getDateTo',
        'affrete' => 'getAffrete',
        'driver' => 'getDriver',
        'truck' => 'getTruck',
        'trailer' => 'getTrailer',
        'resource' => 'getResource',
        'loading_in_linear_meter' => 'getLoadingInLinearMeter',
        'weight_in_ton' => 'getWeightInTon',
        'client' => 'getClient',
        'from_postcode' => 'getFromPostcode',
        'from_city' => 'getFromCity',
        'from_country' => 'getFromCountry',
        'from_gps_coordinates' => 'getFromGpsCoordinates',
        'to_postcode' => 'getToPostcode',
        'to_city' => 'getToCity',
        'to_country' => 'getToCountry',
        'to_gps_coordinates' => 'getToGpsCoordinates',
        'empty_space' => 'getEmptySpace',
        'is_empty_space_known' => 'getIsEmptySpaceKnown',
        'duration' => 'getDuration',
        'start_at' => 'getStartAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['planning_id'] = isset($data['planning_id']) ? $data['planning_id'] : null;
        $this->container['date_from'] = isset($data['date_from']) ? $data['date_from'] : null;
        $this->container['date_to'] = isset($data['date_to']) ? $data['date_to'] : null;
        $this->container['affrete'] = isset($data['affrete']) ? $data['affrete'] : null;
        $this->container['driver'] = isset($data['driver']) ? $data['driver'] : null;
        $this->container['truck'] = isset($data['truck']) ? $data['truck'] : null;
        $this->container['trailer'] = isset($data['trailer']) ? $data['trailer'] : null;
        $this->container['resource'] = isset($data['resource']) ? $data['resource'] : null;
        $this->container['loading_in_linear_meter'] = isset($data['loading_in_linear_meter']) ? $data['loading_in_linear_meter'] : null;
        $this->container['weight_in_ton'] = isset($data['weight_in_ton']) ? $data['weight_in_ton'] : null;
        $this->container['client'] = isset($data['client']) ? $data['client'] : null;
        $this->container['from_postcode'] = isset($data['from_postcode']) ? $data['from_postcode'] : null;
        $this->container['from_city'] = isset($data['from_city']) ? $data['from_city'] : null;
        $this->container['from_country'] = isset($data['from_country']) ? $data['from_country'] : null;
        $this->container['from_gps_coordinates'] = isset($data['from_gps_coordinates']) ? $data['from_gps_coordinates'] : null;
        $this->container['to_postcode'] = isset($data['to_postcode']) ? $data['to_postcode'] : null;
        $this->container['to_city'] = isset($data['to_city']) ? $data['to_city'] : null;
        $this->container['to_country'] = isset($data['to_country']) ? $data['to_country'] : null;
        $this->container['to_gps_coordinates'] = isset($data['to_gps_coordinates']) ? $data['to_gps_coordinates'] : null;
        $this->container['empty_space'] = isset($data['empty_space']) ? $data['empty_space'] : null;
        $this->container['is_empty_space_known'] = isset($data['is_empty_space_known']) ? $data['is_empty_space_known'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['start_at'] = isset($data['start_at']) ? $data['start_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets planning_id
     *
     * @return int
     */
    public function getPlanningId()
    {
        return $this->container['planning_id'];
    }

    /**
     * Sets planning_id
     *
     * @param int $planning_id planning_id
     *
     * @return $this
     */
    public function setPlanningId($planning_id)
    {
        $this->container['planning_id'] = $planning_id;

        return $this;
    }

    /**
     * Gets date_from
     *
     * @return \DateTime
     */
    public function getDateFrom()
    {
        return $this->container['date_from'];
    }

    /**
     * Sets date_from
     *
     * @param \DateTime $date_from date_from
     *
     * @return $this
     */
    public function setDateFrom($date_from)
    {
        $this->container['date_from'] = $date_from;

        return $this;
    }

    /**
     * Gets date_to
     *
     * @return \DateTime
     */
    public function getDateTo()
    {
        return $this->container['date_to'];
    }

    /**
     * Sets date_to
     *
     * @param \DateTime $date_to date_to
     *
     * @return $this
     */
    public function setDateTo($date_to)
    {
        $this->container['date_to'] = $date_to;

        return $this;
    }

    /**
     * Gets affrete
     *
     * @return string
     */
    public function getAffrete()
    {
        return $this->container['affrete'];
    }

    /**
     * Sets affrete
     *
     * @param string $affrete affrete
     *
     * @return $this
     */
    public function setAffrete($affrete)
    {
        $this->container['affrete'] = $affrete;

        return $this;
    }

    /**
     * Gets driver
     *
     * @return string
     */
    public function getDriver()
    {
        return $this->container['driver'];
    }

    /**
     * Sets driver
     *
     * @param string $driver driver
     *
     * @return $this
     */
    public function setDriver($driver)
    {
        $this->container['driver'] = $driver;

        return $this;
    }

    /**
     * Gets truck
     *
     * @return string
     */
    public function getTruck()
    {
        return $this->container['truck'];
    }

    /**
     * Sets truck
     *
     * @param string $truck truck
     *
     * @return $this
     */
    public function setTruck($truck)
    {
        $this->container['truck'] = $truck;

        return $this;
    }

    /**
     * Gets trailer
     *
     * @return string
     */
    public function getTrailer()
    {
        return $this->container['trailer'];
    }

    /**
     * Sets trailer
     *
     * @param string $trailer trailer
     *
     * @return $this
     */
    public function setTrailer($trailer)
    {
        $this->container['trailer'] = $trailer;

        return $this;
    }

    /**
     * Gets resource
     *
     * @return \Swagger\Client\Model\SearchMetadataResource
     */
    public function getResource()
    {
        return $this->container['resource'];
    }

    /**
     * Sets resource
     *
     * @param \Swagger\Client\Model\SearchMetadataResource $resource resource
     *
     * @return $this
     */
    public function setResource($resource)
    {
        $this->container['resource'] = $resource;

        return $this;
    }

    /**
     * Gets loading_in_linear_meter
     *
     * @return float
     */
    public function getLoadingInLinearMeter()
    {
        return $this->container['loading_in_linear_meter'];
    }

    /**
     * Sets loading_in_linear_meter
     *
     * @param float $loading_in_linear_meter loading_in_linear_meter
     *
     * @return $this
     */
    public function setLoadingInLinearMeter($loading_in_linear_meter)
    {
        $this->container['loading_in_linear_meter'] = $loading_in_linear_meter;

        return $this;
    }

    /**
     * Gets weight_in_ton
     *
     * @return float
     */
    public function getWeightInTon()
    {
        return $this->container['weight_in_ton'];
    }

    /**
     * Sets weight_in_ton
     *
     * @param float $weight_in_ton weight_in_ton
     *
     * @return $this
     */
    public function setWeightInTon($weight_in_ton)
    {
        $this->container['weight_in_ton'] = $weight_in_ton;

        return $this;
    }

    /**
     * Gets client
     *
     * @return string
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param string $client client
     *
     * @return $this
     */
    public function setClient($client)
    {
        $this->container['client'] = $client;

        return $this;
    }

    /**
     * Gets from_postcode
     *
     * @return string
     */
    public function getFromPostcode()
    {
        return $this->container['from_postcode'];
    }

    /**
     * Sets from_postcode
     *
     * @param string $from_postcode from_postcode
     *
     * @return $this
     */
    public function setFromPostcode($from_postcode)
    {
        $this->container['from_postcode'] = $from_postcode;

        return $this;
    }

    /**
     * Gets from_city
     *
     * @return string
     */
    public function getFromCity()
    {
        return $this->container['from_city'];
    }

    /**
     * Sets from_city
     *
     * @param string $from_city from_city
     *
     * @return $this
     */
    public function setFromCity($from_city)
    {
        $this->container['from_city'] = $from_city;

        return $this;
    }

    /**
     * Gets from_country
     *
     * @return string
     */
    public function getFromCountry()
    {
        return $this->container['from_country'];
    }

    /**
     * Sets from_country
     *
     * @param string $from_country from_country
     *
     * @return $this
     */
    public function setFromCountry($from_country)
    {
        $this->container['from_country'] = $from_country;

        return $this;
    }

    /**
     * Gets from_gps_coordinates
     *
     * @return \Swagger\Client\Model\GeoJsonPoint
     */
    public function getFromGpsCoordinates()
    {
        return $this->container['from_gps_coordinates'];
    }

    /**
     * Sets from_gps_coordinates
     *
     * @param \Swagger\Client\Model\GeoJsonPoint $from_gps_coordinates from_gps_coordinates
     *
     * @return $this
     */
    public function setFromGpsCoordinates($from_gps_coordinates)
    {
        $this->container['from_gps_coordinates'] = $from_gps_coordinates;

        return $this;
    }

    /**
     * Gets to_postcode
     *
     * @return string
     */
    public function getToPostcode()
    {
        return $this->container['to_postcode'];
    }

    /**
     * Sets to_postcode
     *
     * @param string $to_postcode to_postcode
     *
     * @return $this
     */
    public function setToPostcode($to_postcode)
    {
        $this->container['to_postcode'] = $to_postcode;

        return $this;
    }

    /**
     * Gets to_city
     *
     * @return string
     */
    public function getToCity()
    {
        return $this->container['to_city'];
    }

    /**
     * Sets to_city
     *
     * @param string $to_city to_city
     *
     * @return $this
     */
    public function setToCity($to_city)
    {
        $this->container['to_city'] = $to_city;

        return $this;
    }

    /**
     * Gets to_country
     *
     * @return string
     */
    public function getToCountry()
    {
        return $this->container['to_country'];
    }

    /**
     * Sets to_country
     *
     * @param string $to_country to_country
     *
     * @return $this
     */
    public function setToCountry($to_country)
    {
        $this->container['to_country'] = $to_country;

        return $this;
    }

    /**
     * Gets to_gps_coordinates
     *
     * @return \Swagger\Client\Model\GeoJsonPoint
     */
    public function getToGpsCoordinates()
    {
        return $this->container['to_gps_coordinates'];
    }

    /**
     * Sets to_gps_coordinates
     *
     * @param \Swagger\Client\Model\GeoJsonPoint $to_gps_coordinates to_gps_coordinates
     *
     * @return $this
     */
    public function setToGpsCoordinates($to_gps_coordinates)
    {
        $this->container['to_gps_coordinates'] = $to_gps_coordinates;

        return $this;
    }

    /**
     * Gets empty_space
     *
     * @return float
     */
    public function getEmptySpace()
    {
        return $this->container['empty_space'];
    }

    /**
     * Sets empty_space
     *
     * @param float $empty_space empty_space
     *
     * @return $this
     */
    public function setEmptySpace($empty_space)
    {
        $this->container['empty_space'] = $empty_space;

        return $this;
    }

    /**
     * Gets is_empty_space_known
     *
     * @return bool
     */
    public function getIsEmptySpaceKnown()
    {
        return $this->container['is_empty_space_known'];
    }

    /**
     * Sets is_empty_space_known
     *
     * @param bool $is_empty_space_known is_empty_space_known
     *
     * @return $this
     */
    public function setIsEmptySpaceKnown($is_empty_space_known)
    {
        $this->container['is_empty_space_known'] = $is_empty_space_known;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return float
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param float $duration duration
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets start_at
     *
     * @return float
     */
    public function getStartAt()
    {
        return $this->container['start_at'];
    }

    /**
     * Sets start_at
     *
     * @param float $start_at start_at
     *
     * @return $this
     */
    public function setStartAt($start_at)
    {
        $this->container['start_at'] = $start_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


