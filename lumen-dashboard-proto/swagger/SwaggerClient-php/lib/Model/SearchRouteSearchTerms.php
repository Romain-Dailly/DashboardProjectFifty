<?php
/**
 * SearchRouteSearchTerms
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fifty Truck API
 *
 * This is the API of fifty truck
 *
 * OpenAPI spec version: 0.1.0
 * Contact: contact@fiftytruck.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SearchRouteSearchTerms Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchRouteSearchTerms implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SearchRoute_searchTerms';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'loading_point_address_gps_coordinates' => '\Swagger\Client\Model\GeoJsonPoint',
        'loading_point_address_radius' => 'int',
        'unloading_point_address_gps_coordinates' => '\Swagger\Client\Model\GeoJsonPoint',
        'unloading_point_address_radius' => 'int',
        'search_on_course' => 'bool',
        'course_max_detour' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'loading_point_address_gps_coordinates' => null,
        'loading_point_address_radius' => 'int64',
        'unloading_point_address_gps_coordinates' => null,
        'unloading_point_address_radius' => 'int64',
        'search_on_course' => null,
        'course_max_detour' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'loading_point_address_gps_coordinates' => 'loadingPointAddressGpsCoordinates',
        'loading_point_address_radius' => 'loadingPointAddressRadius',
        'unloading_point_address_gps_coordinates' => 'unloadingPointAddressGpsCoordinates',
        'unloading_point_address_radius' => 'unloadingPointAddressRadius',
        'search_on_course' => 'searchOnCourse',
        'course_max_detour' => 'courseMaxDetour'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'loading_point_address_gps_coordinates' => 'setLoadingPointAddressGpsCoordinates',
        'loading_point_address_radius' => 'setLoadingPointAddressRadius',
        'unloading_point_address_gps_coordinates' => 'setUnloadingPointAddressGpsCoordinates',
        'unloading_point_address_radius' => 'setUnloadingPointAddressRadius',
        'search_on_course' => 'setSearchOnCourse',
        'course_max_detour' => 'setCourseMaxDetour'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'loading_point_address_gps_coordinates' => 'getLoadingPointAddressGpsCoordinates',
        'loading_point_address_radius' => 'getLoadingPointAddressRadius',
        'unloading_point_address_gps_coordinates' => 'getUnloadingPointAddressGpsCoordinates',
        'unloading_point_address_radius' => 'getUnloadingPointAddressRadius',
        'search_on_course' => 'getSearchOnCourse',
        'course_max_detour' => 'getCourseMaxDetour'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['loading_point_address_gps_coordinates'] = isset($data['loading_point_address_gps_coordinates']) ? $data['loading_point_address_gps_coordinates'] : null;
        $this->container['loading_point_address_radius'] = isset($data['loading_point_address_radius']) ? $data['loading_point_address_radius'] : null;
        $this->container['unloading_point_address_gps_coordinates'] = isset($data['unloading_point_address_gps_coordinates']) ? $data['unloading_point_address_gps_coordinates'] : null;
        $this->container['unloading_point_address_radius'] = isset($data['unloading_point_address_radius']) ? $data['unloading_point_address_radius'] : null;
        $this->container['search_on_course'] = isset($data['search_on_course']) ? $data['search_on_course'] : null;
        $this->container['course_max_detour'] = isset($data['course_max_detour']) ? $data['course_max_detour'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets loading_point_address_gps_coordinates
     *
     * @return \Swagger\Client\Model\GeoJsonPoint
     */
    public function getLoadingPointAddressGpsCoordinates()
    {
        return $this->container['loading_point_address_gps_coordinates'];
    }

    /**
     * Sets loading_point_address_gps_coordinates
     *
     * @param \Swagger\Client\Model\GeoJsonPoint $loading_point_address_gps_coordinates loading_point_address_gps_coordinates
     *
     * @return $this
     */
    public function setLoadingPointAddressGpsCoordinates($loading_point_address_gps_coordinates)
    {
        $this->container['loading_point_address_gps_coordinates'] = $loading_point_address_gps_coordinates;

        return $this;
    }

    /**
     * Gets loading_point_address_radius
     *
     * @return int
     */
    public function getLoadingPointAddressRadius()
    {
        return $this->container['loading_point_address_radius'];
    }

    /**
     * Sets loading_point_address_radius
     *
     * @param int $loading_point_address_radius loading_point_address_radius
     *
     * @return $this
     */
    public function setLoadingPointAddressRadius($loading_point_address_radius)
    {
        $this->container['loading_point_address_radius'] = $loading_point_address_radius;

        return $this;
    }

    /**
     * Gets unloading_point_address_gps_coordinates
     *
     * @return \Swagger\Client\Model\GeoJsonPoint
     */
    public function getUnloadingPointAddressGpsCoordinates()
    {
        return $this->container['unloading_point_address_gps_coordinates'];
    }

    /**
     * Sets unloading_point_address_gps_coordinates
     *
     * @param \Swagger\Client\Model\GeoJsonPoint $unloading_point_address_gps_coordinates unloading_point_address_gps_coordinates
     *
     * @return $this
     */
    public function setUnloadingPointAddressGpsCoordinates($unloading_point_address_gps_coordinates)
    {
        $this->container['unloading_point_address_gps_coordinates'] = $unloading_point_address_gps_coordinates;

        return $this;
    }

    /**
     * Gets unloading_point_address_radius
     *
     * @return int
     */
    public function getUnloadingPointAddressRadius()
    {
        return $this->container['unloading_point_address_radius'];
    }

    /**
     * Sets unloading_point_address_radius
     *
     * @param int $unloading_point_address_radius unloading_point_address_radius
     *
     * @return $this
     */
    public function setUnloadingPointAddressRadius($unloading_point_address_radius)
    {
        $this->container['unloading_point_address_radius'] = $unloading_point_address_radius;

        return $this;
    }

    /**
     * Gets search_on_course
     *
     * @return bool
     */
    public function getSearchOnCourse()
    {
        return $this->container['search_on_course'];
    }

    /**
     * Sets search_on_course
     *
     * @param bool $search_on_course search_on_course
     *
     * @return $this
     */
    public function setSearchOnCourse($search_on_course)
    {
        $this->container['search_on_course'] = $search_on_course;

        return $this;
    }

    /**
     * Gets course_max_detour
     *
     * @return int
     */
    public function getCourseMaxDetour()
    {
        return $this->container['course_max_detour'];
    }

    /**
     * Sets course_max_detour
     *
     * @param int $course_max_detour course_max_detour
     *
     * @return $this
     */
    public function setCourseMaxDetour($course_max_detour)
    {
        $this->container['course_max_detour'] = $course_max_detour;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


