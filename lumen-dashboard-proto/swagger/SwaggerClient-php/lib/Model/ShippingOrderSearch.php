<?php
/**
 * ShippingOrderSearch
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fifty Truck API
 *
 * This is the API of fifty truck
 *
 * OpenAPI spec version: 0.1.0
 * Contact: contact@fiftytruck.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ShippingOrderSearch Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShippingOrderSearch implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShippingOrderSearch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'operator_id' => 'int',
        'carrier_id' => 'int',
        'name' => 'string',
        'type' => 'string',
        'is_active' => 'bool',
        'is_running' => 'bool',
        'push_activated' => 'bool',
        'push_score_threshold' => 'float',
        'search_routes' => '\Swagger\Client\Model\SearchRoute[]',
        'global_search_terms' => '\Swagger\Client\Model\ShippingOrderSearchGlobalSearchTerms',
        'costs' => '\Swagger\Client\Model\SearchCosts',
        'metadata' => '\Swagger\Client\Model\SearchMetadata'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'operator_id' => 'int64',
        'carrier_id' => 'int64',
        'name' => 'string',
        'type' => null,
        'is_active' => null,
        'is_running' => null,
        'push_activated' => null,
        'push_score_threshold' => 'float',
        'search_routes' => null,
        'global_search_terms' => null,
        'costs' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'operator_id' => 'operatorId',
        'carrier_id' => 'carrierId',
        'name' => 'name',
        'type' => 'type',
        'is_active' => 'isActive',
        'is_running' => 'isRunning',
        'push_activated' => 'pushActivated',
        'push_score_threshold' => 'pushScoreThreshold',
        'search_routes' => 'searchRoutes',
        'global_search_terms' => 'globalSearchTerms',
        'costs' => 'costs',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'operator_id' => 'setOperatorId',
        'carrier_id' => 'setCarrierId',
        'name' => 'setName',
        'type' => 'setType',
        'is_active' => 'setIsActive',
        'is_running' => 'setIsRunning',
        'push_activated' => 'setPushActivated',
        'push_score_threshold' => 'setPushScoreThreshold',
        'search_routes' => 'setSearchRoutes',
        'global_search_terms' => 'setGlobalSearchTerms',
        'costs' => 'setCosts',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'operator_id' => 'getOperatorId',
        'carrier_id' => 'getCarrierId',
        'name' => 'getName',
        'type' => 'getType',
        'is_active' => 'getIsActive',
        'is_running' => 'getIsRunning',
        'push_activated' => 'getPushActivated',
        'push_score_threshold' => 'getPushScoreThreshold',
        'search_routes' => 'getSearchRoutes',
        'global_search_terms' => 'getGlobalSearchTerms',
        'costs' => 'getCosts',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_PATH = 'path';
    const TYPE_TMS = 'tms';
    const TYPE_TRUCK = 'truck';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PATH,
            self::TYPE_TMS,
            self::TYPE_TRUCK,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['operator_id'] = isset($data['operator_id']) ? $data['operator_id'] : null;
        $this->container['carrier_id'] = isset($data['carrier_id']) ? $data['carrier_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['is_running'] = isset($data['is_running']) ? $data['is_running'] : null;
        $this->container['push_activated'] = isset($data['push_activated']) ? $data['push_activated'] : null;
        $this->container['push_score_threshold'] = isset($data['push_score_threshold']) ? $data['push_score_threshold'] : null;
        $this->container['search_routes'] = isset($data['search_routes']) ? $data['search_routes'] : null;
        $this->container['global_search_terms'] = isset($data['global_search_terms']) ? $data['global_search_terms'] : null;
        $this->container['costs'] = isset($data['costs']) ? $data['costs'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets operator_id
     *
     * @return int
     */
    public function getOperatorId()
    {
        return $this->container['operator_id'];
    }

    /**
     * Sets operator_id
     *
     * @param int $operator_id operator_id
     *
     * @return $this
     */
    public function setOperatorId($operator_id)
    {
        $this->container['operator_id'] = $operator_id;

        return $this;
    }

    /**
     * Gets carrier_id
     *
     * @return int
     */
    public function getCarrierId()
    {
        return $this->container['carrier_id'];
    }

    /**
     * Sets carrier_id
     *
     * @param int $carrier_id carrier_id
     *
     * @return $this
     */
    public function setCarrierId($carrier_id)
    {
        $this->container['carrier_id'] = $carrier_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets is_running
     *
     * @return bool
     */
    public function getIsRunning()
    {
        return $this->container['is_running'];
    }

    /**
     * Sets is_running
     *
     * @param bool $is_running is_running
     *
     * @return $this
     */
    public function setIsRunning($is_running)
    {
        $this->container['is_running'] = $is_running;

        return $this;
    }

    /**
     * Gets push_activated
     *
     * @return bool
     */
    public function getPushActivated()
    {
        return $this->container['push_activated'];
    }

    /**
     * Sets push_activated
     *
     * @param bool $push_activated push_activated
     *
     * @return $this
     */
    public function setPushActivated($push_activated)
    {
        $this->container['push_activated'] = $push_activated;

        return $this;
    }

    /**
     * Gets push_score_threshold
     *
     * @return float
     */
    public function getPushScoreThreshold()
    {
        return $this->container['push_score_threshold'];
    }

    /**
     * Sets push_score_threshold
     *
     * @param float $push_score_threshold push_score_threshold
     *
     * @return $this
     */
    public function setPushScoreThreshold($push_score_threshold)
    {
        $this->container['push_score_threshold'] = $push_score_threshold;

        return $this;
    }

    /**
     * Gets search_routes
     *
     * @return \Swagger\Client\Model\SearchRoute[]
     */
    public function getSearchRoutes()
    {
        return $this->container['search_routes'];
    }

    /**
     * Sets search_routes
     *
     * @param \Swagger\Client\Model\SearchRoute[] $search_routes search_routes
     *
     * @return $this
     */
    public function setSearchRoutes($search_routes)
    {
        $this->container['search_routes'] = $search_routes;

        return $this;
    }

    /**
     * Gets global_search_terms
     *
     * @return \Swagger\Client\Model\ShippingOrderSearchGlobalSearchTerms
     */
    public function getGlobalSearchTerms()
    {
        return $this->container['global_search_terms'];
    }

    /**
     * Sets global_search_terms
     *
     * @param \Swagger\Client\Model\ShippingOrderSearchGlobalSearchTerms $global_search_terms global_search_terms
     *
     * @return $this
     */
    public function setGlobalSearchTerms($global_search_terms)
    {
        $this->container['global_search_terms'] = $global_search_terms;

        return $this;
    }

    /**
     * Gets costs
     *
     * @return \Swagger\Client\Model\SearchCosts
     */
    public function getCosts()
    {
        return $this->container['costs'];
    }

    /**
     * Sets costs
     *
     * @param \Swagger\Client\Model\SearchCosts $costs costs
     *
     * @return $this
     */
    public function setCosts($costs)
    {
        $this->container['costs'] = $costs;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \Swagger\Client\Model\SearchMetadata
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \Swagger\Client\Model\SearchMetadata $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


