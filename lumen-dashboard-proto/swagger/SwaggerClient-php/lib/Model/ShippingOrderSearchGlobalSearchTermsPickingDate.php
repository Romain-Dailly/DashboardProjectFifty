<?php
/**
 * ShippingOrderSearchGlobalSearchTermsPickingDate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fifty Truck API
 *
 * This is the API of fifty truck
 *
 * OpenAPI spec version: 0.1.0
 * Contact: contact@fiftytruck.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ShippingOrderSearchGlobalSearchTermsPickingDate Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShippingOrderSearchGlobalSearchTermsPickingDate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShippingOrderSearch_globalSearchTerms_pickingDate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'picking_date_type' => 'string',
        'picking_date_start' => '\DateTime',
        'picking_date_end' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'picking_date_type' => null,
        'picking_date_start' => 'date-time',
        'picking_date_end' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'picking_date_type' => 'pickingDateType',
        'picking_date_start' => 'pickingDateStart',
        'picking_date_end' => 'pickingDateEnd'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'picking_date_type' => 'setPickingDateType',
        'picking_date_start' => 'setPickingDateStart',
        'picking_date_end' => 'setPickingDateEnd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'picking_date_type' => 'getPickingDateType',
        'picking_date_start' => 'getPickingDateStart',
        'picking_date_end' => 'getPickingDateEnd'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PICKING_DATE_TYPE_EXACT_DAY = 'exactDay';
    const PICKING_DATE_TYPE_BETWEEN = 'between';
    const PICKING_DATE_TYPE_TODAY = 'today';
    const PICKING_DATE_TYPE_TOMORROW = 'tomorrow';
    const PICKING_DATE_TYPE_TODAY_AND_TOMORROW = 'todayAndTomorrow';
    const PICKING_DATE_TYPE_TODAY_AND_TOMORROW_AND_THE_DAY_AFTER = 'todayAndTomorrowAndTheDayAfter';
    const PICKING_DATE_TYPE_TOMORROW_AND_THE_DAY_AFTER = 'tomorrowAndTheDayAfter';
    const PICKING_DATE_TYPE_THE_DAY_AFTER = 'theDayAfter';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPickingDateTypeAllowableValues()
    {
        return [
            self::PICKING_DATE_TYPE_EXACT_DAY,
            self::PICKING_DATE_TYPE_BETWEEN,
            self::PICKING_DATE_TYPE_TODAY,
            self::PICKING_DATE_TYPE_TOMORROW,
            self::PICKING_DATE_TYPE_TODAY_AND_TOMORROW,
            self::PICKING_DATE_TYPE_TODAY_AND_TOMORROW_AND_THE_DAY_AFTER,
            self::PICKING_DATE_TYPE_TOMORROW_AND_THE_DAY_AFTER,
            self::PICKING_DATE_TYPE_THE_DAY_AFTER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['picking_date_type'] = isset($data['picking_date_type']) ? $data['picking_date_type'] : null;
        $this->container['picking_date_start'] = isset($data['picking_date_start']) ? $data['picking_date_start'] : null;
        $this->container['picking_date_end'] = isset($data['picking_date_end']) ? $data['picking_date_end'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPickingDateTypeAllowableValues();
        if (!is_null($this->container['picking_date_type']) && !in_array($this->container['picking_date_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'picking_date_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets picking_date_type
     *
     * @return string
     */
    public function getPickingDateType()
    {
        return $this->container['picking_date_type'];
    }

    /**
     * Sets picking_date_type
     *
     * @param string $picking_date_type picking_date_type
     *
     * @return $this
     */
    public function setPickingDateType($picking_date_type)
    {
        $allowedValues = $this->getPickingDateTypeAllowableValues();
        if (!is_null($picking_date_type) && !in_array($picking_date_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'picking_date_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['picking_date_type'] = $picking_date_type;

        return $this;
    }

    /**
     * Gets picking_date_start
     *
     * @return \DateTime
     */
    public function getPickingDateStart()
    {
        return $this->container['picking_date_start'];
    }

    /**
     * Sets picking_date_start
     *
     * @param \DateTime $picking_date_start picking_date_start
     *
     * @return $this
     */
    public function setPickingDateStart($picking_date_start)
    {
        $this->container['picking_date_start'] = $picking_date_start;

        return $this;
    }

    /**
     * Gets picking_date_end
     *
     * @return \DateTime
     */
    public function getPickingDateEnd()
    {
        return $this->container['picking_date_end'];
    }

    /**
     * Sets picking_date_end
     *
     * @param \DateTime $picking_date_end picking_date_end
     *
     * @return $this
     */
    public function setPickingDateEnd($picking_date_end)
    {
        $this->container['picking_date_end'] = $picking_date_end;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


