<?php
/**
 * ShippingOrderGrouping
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fifty Truck API
 *
 * This is the API of fifty truck
 *
 * OpenAPI spec version: 0.1.0
 * Contact: contact@fiftytruck.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ShippingOrderGrouping Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShippingOrderGrouping implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShippingOrderGrouping';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shipping_order_result' => '\Swagger\Client\Model\ShippingOrderResult',
        'shipping_order_result_complement' => '\Swagger\Client\Model\ShippingOrderResult',
        'route_estimation' => '\Swagger\Client\Model\Route',
        'scores' => '\Swagger\Client\Model\Score',
        'is_complement_before' => 'bool',
        'is_without_toll' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shipping_order_result' => null,
        'shipping_order_result_complement' => null,
        'route_estimation' => null,
        'scores' => null,
        'is_complement_before' => null,
        'is_without_toll' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipping_order_result' => 'shippingOrderResult',
        'shipping_order_result_complement' => 'shippingOrderResultComplement',
        'route_estimation' => 'routeEstimation',
        'scores' => 'scores',
        'is_complement_before' => 'isComplementBefore',
        'is_without_toll' => 'isWithoutToll'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipping_order_result' => 'setShippingOrderResult',
        'shipping_order_result_complement' => 'setShippingOrderResultComplement',
        'route_estimation' => 'setRouteEstimation',
        'scores' => 'setScores',
        'is_complement_before' => 'setIsComplementBefore',
        'is_without_toll' => 'setIsWithoutToll'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipping_order_result' => 'getShippingOrderResult',
        'shipping_order_result_complement' => 'getShippingOrderResultComplement',
        'route_estimation' => 'getRouteEstimation',
        'scores' => 'getScores',
        'is_complement_before' => 'getIsComplementBefore',
        'is_without_toll' => 'getIsWithoutToll'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shipping_order_result'] = isset($data['shipping_order_result']) ? $data['shipping_order_result'] : null;
        $this->container['shipping_order_result_complement'] = isset($data['shipping_order_result_complement']) ? $data['shipping_order_result_complement'] : null;
        $this->container['route_estimation'] = isset($data['route_estimation']) ? $data['route_estimation'] : null;
        $this->container['scores'] = isset($data['scores']) ? $data['scores'] : null;
        $this->container['is_complement_before'] = isset($data['is_complement_before']) ? $data['is_complement_before'] : null;
        $this->container['is_without_toll'] = isset($data['is_without_toll']) ? $data['is_without_toll'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipping_order_result
     *
     * @return \Swagger\Client\Model\ShippingOrderResult
     */
    public function getShippingOrderResult()
    {
        return $this->container['shipping_order_result'];
    }

    /**
     * Sets shipping_order_result
     *
     * @param \Swagger\Client\Model\ShippingOrderResult $shipping_order_result shipping_order_result
     *
     * @return $this
     */
    public function setShippingOrderResult($shipping_order_result)
    {
        $this->container['shipping_order_result'] = $shipping_order_result;

        return $this;
    }

    /**
     * Gets shipping_order_result_complement
     *
     * @return \Swagger\Client\Model\ShippingOrderResult
     */
    public function getShippingOrderResultComplement()
    {
        return $this->container['shipping_order_result_complement'];
    }

    /**
     * Sets shipping_order_result_complement
     *
     * @param \Swagger\Client\Model\ShippingOrderResult $shipping_order_result_complement shipping_order_result_complement
     *
     * @return $this
     */
    public function setShippingOrderResultComplement($shipping_order_result_complement)
    {
        $this->container['shipping_order_result_complement'] = $shipping_order_result_complement;

        return $this;
    }

    /**
     * Gets route_estimation
     *
     * @return \Swagger\Client\Model\Route
     */
    public function getRouteEstimation()
    {
        return $this->container['route_estimation'];
    }

    /**
     * Sets route_estimation
     *
     * @param \Swagger\Client\Model\Route $route_estimation route_estimation
     *
     * @return $this
     */
    public function setRouteEstimation($route_estimation)
    {
        $this->container['route_estimation'] = $route_estimation;

        return $this;
    }

    /**
     * Gets scores
     *
     * @return \Swagger\Client\Model\Score
     */
    public function getScores()
    {
        return $this->container['scores'];
    }

    /**
     * Sets scores
     *
     * @param \Swagger\Client\Model\Score $scores scores
     *
     * @return $this
     */
    public function setScores($scores)
    {
        $this->container['scores'] = $scores;

        return $this;
    }

    /**
     * Gets is_complement_before
     *
     * @return bool
     */
    public function getIsComplementBefore()
    {
        return $this->container['is_complement_before'];
    }

    /**
     * Sets is_complement_before
     *
     * @param bool $is_complement_before is_complement_before
     *
     * @return $this
     */
    public function setIsComplementBefore($is_complement_before)
    {
        $this->container['is_complement_before'] = $is_complement_before;

        return $this;
    }

    /**
     * Gets is_without_toll
     *
     * @return bool
     */
    public function getIsWithoutToll()
    {
        return $this->container['is_without_toll'];
    }

    /**
     * Sets is_without_toll
     *
     * @param bool $is_without_toll is_without_toll
     *
     * @return $this
     */
    public function setIsWithoutToll($is_without_toll)
    {
        $this->container['is_without_toll'] = $is_without_toll;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


