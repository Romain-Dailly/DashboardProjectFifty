<?php
/**
 * Score
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fifty Truck API
 *
 * This is the API of fifty truck
 *
 * OpenAPI spec version: 0.1.0
 * Contact: contact@fiftytruck.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Score Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Score implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Score';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'overall' => 'float',
        'loading_rate' => 'float',
        'itinerary_coverage' => 'float',
        'detour_ratio' => 'float',
        'detour_duration' => 'float',
        'shipper_score' => 'float',
        'data_source' => '\Swagger\Client\Model\ScoreDatasource'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'overall' => 'float',
        'loading_rate' => 'float',
        'itinerary_coverage' => 'float',
        'detour_ratio' => 'float',
        'detour_duration' => 'int',
        'shipper_score' => 'float',
        'data_source' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'overall' => 'overall',
        'loading_rate' => 'loadingRate',
        'itinerary_coverage' => 'itineraryCoverage',
        'detour_ratio' => 'detourRatio',
        'detour_duration' => 'detourDuration',
        'shipper_score' => 'shipperScore',
        'data_source' => 'dataSource'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'overall' => 'setOverall',
        'loading_rate' => 'setLoadingRate',
        'itinerary_coverage' => 'setItineraryCoverage',
        'detour_ratio' => 'setDetourRatio',
        'detour_duration' => 'setDetourDuration',
        'shipper_score' => 'setShipperScore',
        'data_source' => 'setDataSource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'overall' => 'getOverall',
        'loading_rate' => 'getLoadingRate',
        'itinerary_coverage' => 'getItineraryCoverage',
        'detour_ratio' => 'getDetourRatio',
        'detour_duration' => 'getDetourDuration',
        'shipper_score' => 'getShipperScore',
        'data_source' => 'getDataSource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['overall'] = isset($data['overall']) ? $data['overall'] : null;
        $this->container['loading_rate'] = isset($data['loading_rate']) ? $data['loading_rate'] : null;
        $this->container['itinerary_coverage'] = isset($data['itinerary_coverage']) ? $data['itinerary_coverage'] : null;
        $this->container['detour_ratio'] = isset($data['detour_ratio']) ? $data['detour_ratio'] : null;
        $this->container['detour_duration'] = isset($data['detour_duration']) ? $data['detour_duration'] : null;
        $this->container['shipper_score'] = isset($data['shipper_score']) ? $data['shipper_score'] : null;
        $this->container['data_source'] = isset($data['data_source']) ? $data['data_source'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets overall
     *
     * @return float
     */
    public function getOverall()
    {
        return $this->container['overall'];
    }

    /**
     * Sets overall
     *
     * @param float $overall overall
     *
     * @return $this
     */
    public function setOverall($overall)
    {
        $this->container['overall'] = $overall;

        return $this;
    }

    /**
     * Gets loading_rate
     *
     * @return float
     */
    public function getLoadingRate()
    {
        return $this->container['loading_rate'];
    }

    /**
     * Sets loading_rate
     *
     * @param float $loading_rate loading_rate
     *
     * @return $this
     */
    public function setLoadingRate($loading_rate)
    {
        $this->container['loading_rate'] = $loading_rate;

        return $this;
    }

    /**
     * Gets itinerary_coverage
     *
     * @return float
     */
    public function getItineraryCoverage()
    {
        return $this->container['itinerary_coverage'];
    }

    /**
     * Sets itinerary_coverage
     *
     * @param float $itinerary_coverage itinerary_coverage
     *
     * @return $this
     */
    public function setItineraryCoverage($itinerary_coverage)
    {
        $this->container['itinerary_coverage'] = $itinerary_coverage;

        return $this;
    }

    /**
     * Gets detour_ratio
     *
     * @return float
     */
    public function getDetourRatio()
    {
        return $this->container['detour_ratio'];
    }

    /**
     * Sets detour_ratio
     *
     * @param float $detour_ratio detour_ratio
     *
     * @return $this
     */
    public function setDetourRatio($detour_ratio)
    {
        $this->container['detour_ratio'] = $detour_ratio;

        return $this;
    }

    /**
     * Gets detour_duration
     *
     * @return float
     */
    public function getDetourDuration()
    {
        return $this->container['detour_duration'];
    }

    /**
     * Sets detour_duration
     *
     * @param float $detour_duration detour_duration
     *
     * @return $this
     */
    public function setDetourDuration($detour_duration)
    {
        $this->container['detour_duration'] = $detour_duration;

        return $this;
    }

    /**
     * Gets shipper_score
     *
     * @return float
     */
    public function getShipperScore()
    {
        return $this->container['shipper_score'];
    }

    /**
     * Sets shipper_score
     *
     * @param float $shipper_score shipper_score
     *
     * @return $this
     */
    public function setShipperScore($shipper_score)
    {
        $this->container['shipper_score'] = $shipper_score;

        return $this;
    }

    /**
     * Gets data_source
     *
     * @return \Swagger\Client\Model\ScoreDatasource
     */
    public function getDataSource()
    {
        return $this->container['data_source'];
    }

    /**
     * Sets data_source
     *
     * @param \Swagger\Client\Model\ScoreDatasource $data_source data_source
     *
     * @return $this
     */
    public function setDataSource($data_source)
    {
        $this->container['data_source'] = $data_source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


