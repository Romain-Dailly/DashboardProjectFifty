<?php
/**
 * SearchRoute
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fifty Truck API
 *
 * This is the API of fifty truck
 *
 * OpenAPI spec version: 0.1.0
 * Contact: contact@fiftytruck.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SearchRoute Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchRoute implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SearchRoute';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'shipping_order_search_id' => 'int',
        'search_terms' => '\Swagger\Client\Model\SearchRouteSearchTerms',
        'computed_search_zones' => '\Swagger\Client\Model\SearchRouteComputedSearchZones',
        'route_with_toll' => '\Swagger\Client\Model\Route',
        'route_without_toll' => '\Swagger\Client\Model\Route',
        'waypoints' => '\Swagger\Client\Model\RouteWaypoint[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'shipping_order_search_id' => 'int64',
        'search_terms' => null,
        'computed_search_zones' => null,
        'route_with_toll' => null,
        'route_without_toll' => null,
        'waypoints' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'shipping_order_search_id' => 'shippingOrderSearchId',
        'search_terms' => 'searchTerms',
        'computed_search_zones' => 'computedSearchZones',
        'route_with_toll' => 'routeWithToll',
        'route_without_toll' => 'routeWithoutToll',
        'waypoints' => 'waypoints'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'shipping_order_search_id' => 'setShippingOrderSearchId',
        'search_terms' => 'setSearchTerms',
        'computed_search_zones' => 'setComputedSearchZones',
        'route_with_toll' => 'setRouteWithToll',
        'route_without_toll' => 'setRouteWithoutToll',
        'waypoints' => 'setWaypoints'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'shipping_order_search_id' => 'getShippingOrderSearchId',
        'search_terms' => 'getSearchTerms',
        'computed_search_zones' => 'getComputedSearchZones',
        'route_with_toll' => 'getRouteWithToll',
        'route_without_toll' => 'getRouteWithoutToll',
        'waypoints' => 'getWaypoints'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['shipping_order_search_id'] = isset($data['shipping_order_search_id']) ? $data['shipping_order_search_id'] : null;
        $this->container['search_terms'] = isset($data['search_terms']) ? $data['search_terms'] : null;
        $this->container['computed_search_zones'] = isset($data['computed_search_zones']) ? $data['computed_search_zones'] : null;
        $this->container['route_with_toll'] = isset($data['route_with_toll']) ? $data['route_with_toll'] : null;
        $this->container['route_without_toll'] = isset($data['route_without_toll']) ? $data['route_without_toll'] : null;
        $this->container['waypoints'] = isset($data['waypoints']) ? $data['waypoints'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets shipping_order_search_id
     *
     * @return int
     */
    public function getShippingOrderSearchId()
    {
        return $this->container['shipping_order_search_id'];
    }

    /**
     * Sets shipping_order_search_id
     *
     * @param int $shipping_order_search_id shipping_order_search_id
     *
     * @return $this
     */
    public function setShippingOrderSearchId($shipping_order_search_id)
    {
        $this->container['shipping_order_search_id'] = $shipping_order_search_id;

        return $this;
    }

    /**
     * Gets search_terms
     *
     * @return \Swagger\Client\Model\SearchRouteSearchTerms
     */
    public function getSearchTerms()
    {
        return $this->container['search_terms'];
    }

    /**
     * Sets search_terms
     *
     * @param \Swagger\Client\Model\SearchRouteSearchTerms $search_terms search_terms
     *
     * @return $this
     */
    public function setSearchTerms($search_terms)
    {
        $this->container['search_terms'] = $search_terms;

        return $this;
    }

    /**
     * Gets computed_search_zones
     *
     * @return \Swagger\Client\Model\SearchRouteComputedSearchZones
     */
    public function getComputedSearchZones()
    {
        return $this->container['computed_search_zones'];
    }

    /**
     * Sets computed_search_zones
     *
     * @param \Swagger\Client\Model\SearchRouteComputedSearchZones $computed_search_zones computed_search_zones
     *
     * @return $this
     */
    public function setComputedSearchZones($computed_search_zones)
    {
        $this->container['computed_search_zones'] = $computed_search_zones;

        return $this;
    }

    /**
     * Gets route_with_toll
     *
     * @return \Swagger\Client\Model\Route
     */
    public function getRouteWithToll()
    {
        return $this->container['route_with_toll'];
    }

    /**
     * Sets route_with_toll
     *
     * @param \Swagger\Client\Model\Route $route_with_toll route_with_toll
     *
     * @return $this
     */
    public function setRouteWithToll($route_with_toll)
    {
        $this->container['route_with_toll'] = $route_with_toll;

        return $this;
    }

    /**
     * Gets route_without_toll
     *
     * @return \Swagger\Client\Model\Route
     */
    public function getRouteWithoutToll()
    {
        return $this->container['route_without_toll'];
    }

    /**
     * Sets route_without_toll
     *
     * @param \Swagger\Client\Model\Route $route_without_toll route_without_toll
     *
     * @return $this
     */
    public function setRouteWithoutToll($route_without_toll)
    {
        $this->container['route_without_toll'] = $route_without_toll;

        return $this;
    }

    /**
     * Gets waypoints
     *
     * @return \Swagger\Client\Model\RouteWaypoint[]
     */
    public function getWaypoints()
    {
        return $this->container['waypoints'];
    }

    /**
     * Sets waypoints
     *
     * @param \Swagger\Client\Model\RouteWaypoint[] $waypoints waypoints
     *
     * @return $this
     */
    public function setWaypoints($waypoints)
    {
        $this->container['waypoints'] = $waypoints;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


