<?php
/**
 * FleetDriverActivity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fifty Truck API
 *
 * This is the API of fifty truck
 *
 * OpenAPI spec version: 0.1.0
 * Contact: contact@fiftytruck.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FleetDriverActivity Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FleetDriverActivity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FleetDriverActivity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'carrier_id' => 'int',
        'source' => 'string',
        'external_id' => 'string',
        'current_activity' => 'string',
        'current_activity_date' => 'string',
        'current_gps_coordinates' => '\Swagger\Client\Model\GeoJsonPoint',
        'polyline' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'carrier_id' => 'int64',
        'source' => 'string',
        'external_id' => 'string',
        'current_activity' => 'string',
        'current_activity_date' => 'time',
        'current_gps_coordinates' => null,
        'polyline' => 'string'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'carrier_id' => 'carrierId',
        'source' => 'source',
        'external_id' => 'externalId',
        'current_activity' => 'currentActivity',
        'current_activity_date' => 'currentActivityDate',
        'current_gps_coordinates' => 'currentGpsCoordinates',
        'polyline' => 'polyline'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'carrier_id' => 'setCarrierId',
        'source' => 'setSource',
        'external_id' => 'setExternalId',
        'current_activity' => 'setCurrentActivity',
        'current_activity_date' => 'setCurrentActivityDate',
        'current_gps_coordinates' => 'setCurrentGpsCoordinates',
        'polyline' => 'setPolyline'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'carrier_id' => 'getCarrierId',
        'source' => 'getSource',
        'external_id' => 'getExternalId',
        'current_activity' => 'getCurrentActivity',
        'current_activity_date' => 'getCurrentActivityDate',
        'current_gps_coordinates' => 'getCurrentGpsCoordinates',
        'polyline' => 'getPolyline'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['carrier_id'] = isset($data['carrier_id']) ? $data['carrier_id'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['current_activity'] = isset($data['current_activity']) ? $data['current_activity'] : null;
        $this->container['current_activity_date'] = isset($data['current_activity_date']) ? $data['current_activity_date'] : null;
        $this->container['current_gps_coordinates'] = isset($data['current_gps_coordinates']) ? $data['current_gps_coordinates'] : null;
        $this->container['polyline'] = isset($data['polyline']) ? $data['polyline'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets carrier_id
     *
     * @return int
     */
    public function getCarrierId()
    {
        return $this->container['carrier_id'];
    }

    /**
     * Sets carrier_id
     *
     * @param int $carrier_id carrier_id
     *
     * @return $this
     */
    public function setCarrierId($carrier_id)
    {
        $this->container['carrier_id'] = $carrier_id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id external_id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets current_activity
     *
     * @return string
     */
    public function getCurrentActivity()
    {
        return $this->container['current_activity'];
    }

    /**
     * Sets current_activity
     *
     * @param string $current_activity current_activity
     *
     * @return $this
     */
    public function setCurrentActivity($current_activity)
    {
        $this->container['current_activity'] = $current_activity;

        return $this;
    }

    /**
     * Gets current_activity_date
     *
     * @return string
     */
    public function getCurrentActivityDate()
    {
        return $this->container['current_activity_date'];
    }

    /**
     * Sets current_activity_date
     *
     * @param string $current_activity_date current_activity_date
     *
     * @return $this
     */
    public function setCurrentActivityDate($current_activity_date)
    {
        $this->container['current_activity_date'] = $current_activity_date;

        return $this;
    }

    /**
     * Gets current_gps_coordinates
     *
     * @return \Swagger\Client\Model\GeoJsonPoint
     */
    public function getCurrentGpsCoordinates()
    {
        return $this->container['current_gps_coordinates'];
    }

    /**
     * Sets current_gps_coordinates
     *
     * @param \Swagger\Client\Model\GeoJsonPoint $current_gps_coordinates current_gps_coordinates
     *
     * @return $this
     */
    public function setCurrentGpsCoordinates($current_gps_coordinates)
    {
        $this->container['current_gps_coordinates'] = $current_gps_coordinates;

        return $this;
    }

    /**
     * Gets polyline
     *
     * @return string
     */
    public function getPolyline()
    {
        return $this->container['polyline'];
    }

    /**
     * Sets polyline
     *
     * @param string $polyline polyline
     *
     * @return $this
     */
    public function setPolyline($polyline)
    {
        $this->container['polyline'] = $polyline;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


