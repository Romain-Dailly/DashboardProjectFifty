<?php
/**
 * ScoreDatasource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fifty Truck API
 *
 * This is the API of fifty truck
 *
 * OpenAPI spec version: 0.1.0
 * Contact: contact@fiftytruck.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ScoreDatasource Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ScoreDatasource implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ScoreDatasource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shipper_score' => '\Swagger\Client\Model\ShipperScore',
        'distance_in_meters' => 'int',
        'detour_in_meters' => 'int',
        'loading_in_linear_meters' => 'int',
        'vehicle_capacity_in_linear_meters' => 'int',
        'offer_duration' => 'int',
        'final_duration' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shipper_score' => null,
        'distance_in_meters' => 'int64',
        'detour_in_meters' => 'int64',
        'loading_in_linear_meters' => 'int64',
        'vehicle_capacity_in_linear_meters' => 'int64',
        'offer_duration' => 'int64',
        'final_duration' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipper_score' => 'shipperScore',
        'distance_in_meters' => 'distanceInMeters',
        'detour_in_meters' => 'detourInMeters',
        'loading_in_linear_meters' => 'loadingInLinearMeters',
        'vehicle_capacity_in_linear_meters' => 'vehicleCapacityInLinearMeters',
        'offer_duration' => 'offerDuration',
        'final_duration' => 'finalDuration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipper_score' => 'setShipperScore',
        'distance_in_meters' => 'setDistanceInMeters',
        'detour_in_meters' => 'setDetourInMeters',
        'loading_in_linear_meters' => 'setLoadingInLinearMeters',
        'vehicle_capacity_in_linear_meters' => 'setVehicleCapacityInLinearMeters',
        'offer_duration' => 'setOfferDuration',
        'final_duration' => 'setFinalDuration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipper_score' => 'getShipperScore',
        'distance_in_meters' => 'getDistanceInMeters',
        'detour_in_meters' => 'getDetourInMeters',
        'loading_in_linear_meters' => 'getLoadingInLinearMeters',
        'vehicle_capacity_in_linear_meters' => 'getVehicleCapacityInLinearMeters',
        'offer_duration' => 'getOfferDuration',
        'final_duration' => 'getFinalDuration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shipper_score'] = isset($data['shipper_score']) ? $data['shipper_score'] : null;
        $this->container['distance_in_meters'] = isset($data['distance_in_meters']) ? $data['distance_in_meters'] : null;
        $this->container['detour_in_meters'] = isset($data['detour_in_meters']) ? $data['detour_in_meters'] : null;
        $this->container['loading_in_linear_meters'] = isset($data['loading_in_linear_meters']) ? $data['loading_in_linear_meters'] : null;
        $this->container['vehicle_capacity_in_linear_meters'] = isset($data['vehicle_capacity_in_linear_meters']) ? $data['vehicle_capacity_in_linear_meters'] : null;
        $this->container['offer_duration'] = isset($data['offer_duration']) ? $data['offer_duration'] : null;
        $this->container['final_duration'] = isset($data['final_duration']) ? $data['final_duration'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipper_score
     *
     * @return \Swagger\Client\Model\ShipperScore
     */
    public function getShipperScore()
    {
        return $this->container['shipper_score'];
    }

    /**
     * Sets shipper_score
     *
     * @param \Swagger\Client\Model\ShipperScore $shipper_score shipper_score
     *
     * @return $this
     */
    public function setShipperScore($shipper_score)
    {
        $this->container['shipper_score'] = $shipper_score;

        return $this;
    }

    /**
     * Gets distance_in_meters
     *
     * @return int
     */
    public function getDistanceInMeters()
    {
        return $this->container['distance_in_meters'];
    }

    /**
     * Sets distance_in_meters
     *
     * @param int $distance_in_meters distance_in_meters
     *
     * @return $this
     */
    public function setDistanceInMeters($distance_in_meters)
    {
        $this->container['distance_in_meters'] = $distance_in_meters;

        return $this;
    }

    /**
     * Gets detour_in_meters
     *
     * @return int
     */
    public function getDetourInMeters()
    {
        return $this->container['detour_in_meters'];
    }

    /**
     * Sets detour_in_meters
     *
     * @param int $detour_in_meters detour_in_meters
     *
     * @return $this
     */
    public function setDetourInMeters($detour_in_meters)
    {
        $this->container['detour_in_meters'] = $detour_in_meters;

        return $this;
    }

    /**
     * Gets loading_in_linear_meters
     *
     * @return int
     */
    public function getLoadingInLinearMeters()
    {
        return $this->container['loading_in_linear_meters'];
    }

    /**
     * Sets loading_in_linear_meters
     *
     * @param int $loading_in_linear_meters loading_in_linear_meters
     *
     * @return $this
     */
    public function setLoadingInLinearMeters($loading_in_linear_meters)
    {
        $this->container['loading_in_linear_meters'] = $loading_in_linear_meters;

        return $this;
    }

    /**
     * Gets vehicle_capacity_in_linear_meters
     *
     * @return int
     */
    public function getVehicleCapacityInLinearMeters()
    {
        return $this->container['vehicle_capacity_in_linear_meters'];
    }

    /**
     * Sets vehicle_capacity_in_linear_meters
     *
     * @param int $vehicle_capacity_in_linear_meters vehicle_capacity_in_linear_meters
     *
     * @return $this
     */
    public function setVehicleCapacityInLinearMeters($vehicle_capacity_in_linear_meters)
    {
        $this->container['vehicle_capacity_in_linear_meters'] = $vehicle_capacity_in_linear_meters;

        return $this;
    }

    /**
     * Gets offer_duration
     *
     * @return int
     */
    public function getOfferDuration()
    {
        return $this->container['offer_duration'];
    }

    /**
     * Sets offer_duration
     *
     * @param int $offer_duration offer_duration
     *
     * @return $this
     */
    public function setOfferDuration($offer_duration)
    {
        $this->container['offer_duration'] = $offer_duration;

        return $this;
    }

    /**
     * Gets final_duration
     *
     * @return int
     */
    public function getFinalDuration()
    {
        return $this->container['final_duration'];
    }

    /**
     * Sets final_duration
     *
     * @param int $final_duration final_duration
     *
     * @return $this
     */
    public function setFinalDuration($final_duration)
    {
        $this->container['final_duration'] = $final_duration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


