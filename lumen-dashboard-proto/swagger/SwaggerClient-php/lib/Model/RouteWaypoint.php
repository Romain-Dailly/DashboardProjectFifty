<?php
/**
 * RouteWaypoint
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fifty Truck API
 *
 * This is the API of fifty truck
 *
 * OpenAPI spec version: 0.1.0
 * Contact: contact@fiftytruck.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RouteWaypoint Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RouteWaypoint implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RouteWaypoint';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'coordinates' => '\Swagger\Client\Model\GeoJsonPoint',
        'address_number' => 'string',
        'address_street_name' => 'string',
        'address_complement' => 'string',
        'address_postcode' => 'string',
        'address_city' => 'string',
        'address_country' => 'string',
        'country_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'coordinates' => null,
        'address_number' => 'string',
        'address_street_name' => 'string',
        'address_complement' => 'string',
        'address_postcode' => 'string',
        'address_city' => 'string',
        'address_country' => 'string',
        'country_code' => 'string'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'coordinates' => 'coordinates',
        'address_number' => 'addressNumber',
        'address_street_name' => 'addressStreetName',
        'address_complement' => 'addressComplement',
        'address_postcode' => 'addressPostcode',
        'address_city' => 'addressCity',
        'address_country' => 'addressCountry',
        'country_code' => 'countryCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'coordinates' => 'setCoordinates',
        'address_number' => 'setAddressNumber',
        'address_street_name' => 'setAddressStreetName',
        'address_complement' => 'setAddressComplement',
        'address_postcode' => 'setAddressPostcode',
        'address_city' => 'setAddressCity',
        'address_country' => 'setAddressCountry',
        'country_code' => 'setCountryCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'coordinates' => 'getCoordinates',
        'address_number' => 'getAddressNumber',
        'address_street_name' => 'getAddressStreetName',
        'address_complement' => 'getAddressComplement',
        'address_postcode' => 'getAddressPostcode',
        'address_city' => 'getAddressCity',
        'address_country' => 'getAddressCountry',
        'country_code' => 'getCountryCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['coordinates'] = isset($data['coordinates']) ? $data['coordinates'] : null;
        $this->container['address_number'] = isset($data['address_number']) ? $data['address_number'] : null;
        $this->container['address_street_name'] = isset($data['address_street_name']) ? $data['address_street_name'] : null;
        $this->container['address_complement'] = isset($data['address_complement']) ? $data['address_complement'] : null;
        $this->container['address_postcode'] = isset($data['address_postcode']) ? $data['address_postcode'] : null;
        $this->container['address_city'] = isset($data['address_city']) ? $data['address_city'] : null;
        $this->container['address_country'] = isset($data['address_country']) ? $data['address_country'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets coordinates
     *
     * @return \Swagger\Client\Model\GeoJsonPoint
     */
    public function getCoordinates()
    {
        return $this->container['coordinates'];
    }

    /**
     * Sets coordinates
     *
     * @param \Swagger\Client\Model\GeoJsonPoint $coordinates coordinates
     *
     * @return $this
     */
    public function setCoordinates($coordinates)
    {
        $this->container['coordinates'] = $coordinates;

        return $this;
    }

    /**
     * Gets address_number
     *
     * @return string
     */
    public function getAddressNumber()
    {
        return $this->container['address_number'];
    }

    /**
     * Sets address_number
     *
     * @param string $address_number address_number
     *
     * @return $this
     */
    public function setAddressNumber($address_number)
    {
        $this->container['address_number'] = $address_number;

        return $this;
    }

    /**
     * Gets address_street_name
     *
     * @return string
     */
    public function getAddressStreetName()
    {
        return $this->container['address_street_name'];
    }

    /**
     * Sets address_street_name
     *
     * @param string $address_street_name address_street_name
     *
     * @return $this
     */
    public function setAddressStreetName($address_street_name)
    {
        $this->container['address_street_name'] = $address_street_name;

        return $this;
    }

    /**
     * Gets address_complement
     *
     * @return string
     */
    public function getAddressComplement()
    {
        return $this->container['address_complement'];
    }

    /**
     * Sets address_complement
     *
     * @param string $address_complement address_complement
     *
     * @return $this
     */
    public function setAddressComplement($address_complement)
    {
        $this->container['address_complement'] = $address_complement;

        return $this;
    }

    /**
     * Gets address_postcode
     *
     * @return string
     */
    public function getAddressPostcode()
    {
        return $this->container['address_postcode'];
    }

    /**
     * Sets address_postcode
     *
     * @param string $address_postcode address_postcode
     *
     * @return $this
     */
    public function setAddressPostcode($address_postcode)
    {
        $this->container['address_postcode'] = $address_postcode;

        return $this;
    }

    /**
     * Gets address_city
     *
     * @return string
     */
    public function getAddressCity()
    {
        return $this->container['address_city'];
    }

    /**
     * Sets address_city
     *
     * @param string $address_city address_city
     *
     * @return $this
     */
    public function setAddressCity($address_city)
    {
        $this->container['address_city'] = $address_city;

        return $this;
    }

    /**
     * Gets address_country
     *
     * @return string
     */
    public function getAddressCountry()
    {
        return $this->container['address_country'];
    }

    /**
     * Sets address_country
     *
     * @param string $address_country address_country
     *
     * @return $this
     */
    public function setAddressCountry($address_country)
    {
        $this->container['address_country'] = $address_country;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code country_code
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


