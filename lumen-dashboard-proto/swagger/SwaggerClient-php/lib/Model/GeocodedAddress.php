<?php
/**
 * GeocodedAddress
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fifty Truck API
 *
 * This is the API of fifty truck
 *
 * OpenAPI spec version: 0.1.0
 * Contact: contact@fiftytruck.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GeocodedAddress Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GeocodedAddress implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GeocodedAddress';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'gps_coordinates' => '\Swagger\Client\Model\GeoJsonPoint',
        'number' => 'string',
        'street_name' => 'string',
        'complement' => 'string',
        'post_code' => 'string',
        'city' => 'string',
        'country_code' => 'string',
        'administrative_level1_name' => 'string',
        'administrative_level1_code' => 'string',
        'administrative_level2_name' => 'string',
        'administrative_level2_code' => 'string',
        'administrative_level3_name' => 'string',
        'administrative_level3_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'gps_coordinates' => null,
        'number' => 'string',
        'street_name' => 'string',
        'complement' => 'string',
        'post_code' => 'string',
        'city' => 'string',
        'country_code' => 'string',
        'administrative_level1_name' => 'string',
        'administrative_level1_code' => 'string',
        'administrative_level2_name' => 'string',
        'administrative_level2_code' => 'string',
        'administrative_level3_name' => 'string',
        'administrative_level3_code' => 'string'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gps_coordinates' => 'gpsCoordinates',
        'number' => 'number',
        'street_name' => 'streetName',
        'complement' => 'complement',
        'post_code' => 'postCode',
        'city' => 'city',
        'country_code' => 'countryCode',
        'administrative_level1_name' => 'administrativeLevel1Name',
        'administrative_level1_code' => 'administrativeLevel1Code',
        'administrative_level2_name' => 'administrativeLevel2Name',
        'administrative_level2_code' => 'administrativeLevel2Code',
        'administrative_level3_name' => 'administrativeLevel3Name',
        'administrative_level3_code' => 'administrativeLevel3Code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gps_coordinates' => 'setGpsCoordinates',
        'number' => 'setNumber',
        'street_name' => 'setStreetName',
        'complement' => 'setComplement',
        'post_code' => 'setPostCode',
        'city' => 'setCity',
        'country_code' => 'setCountryCode',
        'administrative_level1_name' => 'setAdministrativeLevel1Name',
        'administrative_level1_code' => 'setAdministrativeLevel1Code',
        'administrative_level2_name' => 'setAdministrativeLevel2Name',
        'administrative_level2_code' => 'setAdministrativeLevel2Code',
        'administrative_level3_name' => 'setAdministrativeLevel3Name',
        'administrative_level3_code' => 'setAdministrativeLevel3Code'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gps_coordinates' => 'getGpsCoordinates',
        'number' => 'getNumber',
        'street_name' => 'getStreetName',
        'complement' => 'getComplement',
        'post_code' => 'getPostCode',
        'city' => 'getCity',
        'country_code' => 'getCountryCode',
        'administrative_level1_name' => 'getAdministrativeLevel1Name',
        'administrative_level1_code' => 'getAdministrativeLevel1Code',
        'administrative_level2_name' => 'getAdministrativeLevel2Name',
        'administrative_level2_code' => 'getAdministrativeLevel2Code',
        'administrative_level3_name' => 'getAdministrativeLevel3Name',
        'administrative_level3_code' => 'getAdministrativeLevel3Code'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['gps_coordinates'] = isset($data['gps_coordinates']) ? $data['gps_coordinates'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['street_name'] = isset($data['street_name']) ? $data['street_name'] : null;
        $this->container['complement'] = isset($data['complement']) ? $data['complement'] : null;
        $this->container['post_code'] = isset($data['post_code']) ? $data['post_code'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['administrative_level1_name'] = isset($data['administrative_level1_name']) ? $data['administrative_level1_name'] : null;
        $this->container['administrative_level1_code'] = isset($data['administrative_level1_code']) ? $data['administrative_level1_code'] : null;
        $this->container['administrative_level2_name'] = isset($data['administrative_level2_name']) ? $data['administrative_level2_name'] : null;
        $this->container['administrative_level2_code'] = isset($data['administrative_level2_code']) ? $data['administrative_level2_code'] : null;
        $this->container['administrative_level3_name'] = isset($data['administrative_level3_name']) ? $data['administrative_level3_name'] : null;
        $this->container['administrative_level3_code'] = isset($data['administrative_level3_code']) ? $data['administrative_level3_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gps_coordinates
     *
     * @return \Swagger\Client\Model\GeoJsonPoint
     */
    public function getGpsCoordinates()
    {
        return $this->container['gps_coordinates'];
    }

    /**
     * Sets gps_coordinates
     *
     * @param \Swagger\Client\Model\GeoJsonPoint $gps_coordinates gps_coordinates
     *
     * @return $this
     */
    public function setGpsCoordinates($gps_coordinates)
    {
        $this->container['gps_coordinates'] = $gps_coordinates;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return string
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param string $street_name street_name
     *
     * @return $this
     */
    public function setStreetName($street_name)
    {
        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets complement
     *
     * @return string
     */
    public function getComplement()
    {
        return $this->container['complement'];
    }

    /**
     * Sets complement
     *
     * @param string $complement complement
     *
     * @return $this
     */
    public function setComplement($complement)
    {
        $this->container['complement'] = $complement;

        return $this;
    }

    /**
     * Gets post_code
     *
     * @return string
     */
    public function getPostCode()
    {
        return $this->container['post_code'];
    }

    /**
     * Sets post_code
     *
     * @param string $post_code post_code
     *
     * @return $this
     */
    public function setPostCode($post_code)
    {
        $this->container['post_code'] = $post_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code country_code
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets administrative_level1_name
     *
     * @return string
     */
    public function getAdministrativeLevel1Name()
    {
        return $this->container['administrative_level1_name'];
    }

    /**
     * Sets administrative_level1_name
     *
     * @param string $administrative_level1_name administrative_level1_name
     *
     * @return $this
     */
    public function setAdministrativeLevel1Name($administrative_level1_name)
    {
        $this->container['administrative_level1_name'] = $administrative_level1_name;

        return $this;
    }

    /**
     * Gets administrative_level1_code
     *
     * @return string
     */
    public function getAdministrativeLevel1Code()
    {
        return $this->container['administrative_level1_code'];
    }

    /**
     * Sets administrative_level1_code
     *
     * @param string $administrative_level1_code administrative_level1_code
     *
     * @return $this
     */
    public function setAdministrativeLevel1Code($administrative_level1_code)
    {
        $this->container['administrative_level1_code'] = $administrative_level1_code;

        return $this;
    }

    /**
     * Gets administrative_level2_name
     *
     * @return string
     */
    public function getAdministrativeLevel2Name()
    {
        return $this->container['administrative_level2_name'];
    }

    /**
     * Sets administrative_level2_name
     *
     * @param string $administrative_level2_name administrative_level2_name
     *
     * @return $this
     */
    public function setAdministrativeLevel2Name($administrative_level2_name)
    {
        $this->container['administrative_level2_name'] = $administrative_level2_name;

        return $this;
    }

    /**
     * Gets administrative_level2_code
     *
     * @return string
     */
    public function getAdministrativeLevel2Code()
    {
        return $this->container['administrative_level2_code'];
    }

    /**
     * Sets administrative_level2_code
     *
     * @param string $administrative_level2_code administrative_level2_code
     *
     * @return $this
     */
    public function setAdministrativeLevel2Code($administrative_level2_code)
    {
        $this->container['administrative_level2_code'] = $administrative_level2_code;

        return $this;
    }

    /**
     * Gets administrative_level3_name
     *
     * @return string
     */
    public function getAdministrativeLevel3Name()
    {
        return $this->container['administrative_level3_name'];
    }

    /**
     * Sets administrative_level3_name
     *
     * @param string $administrative_level3_name administrative_level3_name
     *
     * @return $this
     */
    public function setAdministrativeLevel3Name($administrative_level3_name)
    {
        $this->container['administrative_level3_name'] = $administrative_level3_name;

        return $this;
    }

    /**
     * Gets administrative_level3_code
     *
     * @return string
     */
    public function getAdministrativeLevel3Code()
    {
        return $this->container['administrative_level3_code'];
    }

    /**
     * Sets administrative_level3_code
     *
     * @param string $administrative_level3_code administrative_level3_code
     *
     * @return $this
     */
    public function setAdministrativeLevel3Code($administrative_level3_code)
    {
        $this->container['administrative_level3_code'] = $administrative_level3_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


