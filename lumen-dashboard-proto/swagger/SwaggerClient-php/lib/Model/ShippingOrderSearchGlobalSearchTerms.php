<?php
/**
 * ShippingOrderSearchGlobalSearchTerms
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fifty Truck API
 *
 * This is the API of fifty truck
 *
 * OpenAPI spec version: 0.1.0
 * Contact: contact@fiftytruck.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ShippingOrderSearchGlobalSearchTerms Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShippingOrderSearchGlobalSearchTerms implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShippingOrderSearch_globalSearchTerms';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'products_weight_min' => 'float',
        'products_weight_max' => 'float',
        'products_length_min' => 'float',
        'products_length_max' => 'float',
        'products_volume_max' => 'float',
        'is_hazardous_product' => 'string',
        'picking_date' => '\Swagger\Client\Model\ShippingOrderSearchGlobalSearchTermsPickingDate',
        'good_type' => 'string',
        'truck_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'products_weight_min' => null,
        'products_weight_max' => null,
        'products_length_min' => null,
        'products_length_max' => null,
        'products_volume_max' => null,
        'is_hazardous_product' => null,
        'picking_date' => null,
        'good_type' => null,
        'truck_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'products_weight_min' => 'productsWeightMin',
        'products_weight_max' => 'productsWeightMax',
        'products_length_min' => 'productsLengthMin',
        'products_length_max' => 'productsLengthMax',
        'products_volume_max' => 'productsVolumeMax',
        'is_hazardous_product' => 'isHazardousProduct',
        'picking_date' => 'pickingDate',
        'good_type' => 'goodType',
        'truck_type' => 'truckType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'products_weight_min' => 'setProductsWeightMin',
        'products_weight_max' => 'setProductsWeightMax',
        'products_length_min' => 'setProductsLengthMin',
        'products_length_max' => 'setProductsLengthMax',
        'products_volume_max' => 'setProductsVolumeMax',
        'is_hazardous_product' => 'setIsHazardousProduct',
        'picking_date' => 'setPickingDate',
        'good_type' => 'setGoodType',
        'truck_type' => 'setTruckType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'products_weight_min' => 'getProductsWeightMin',
        'products_weight_max' => 'getProductsWeightMax',
        'products_length_min' => 'getProductsLengthMin',
        'products_length_max' => 'getProductsLengthMax',
        'products_volume_max' => 'getProductsVolumeMax',
        'is_hazardous_product' => 'getIsHazardousProduct',
        'picking_date' => 'getPickingDate',
        'good_type' => 'getGoodType',
        'truck_type' => 'getTruckType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const IS_HAZARDOUS_PRODUCT_ALL = 'all';
    const IS_HAZARDOUS_PRODUCT_WITH = 'with';
    const IS_HAZARDOUS_PRODUCT_WITHOUT = 'without';
    const GOOD_TYPE_ALL = 'all';
    const GOOD_TYPE_BULKY_TRANSPORT = 'bulky_transport';
    const GOOD_TYPE_CONTAINERS = 'containers';
    const GOOD_TYPE_EXCEPTIONAL_TRANSPORT = 'exceptional_transport';
    const GOOD_TYPE_GENERAL_MERCHANDISE = 'general_merchandise';
    const GOOD_TYPE_GOVERNED_TEMPERATURE = 'governed_temperature';
    const GOOD_TYPE_MESSAGING = 'messaging';
    const GOOD_TYPE_MOVING = 'moving';
    const GOOD_TYPE_SKIPS = 'skips';
    const GOOD_TYPE_TANKERS = 'tankers';
    const TRUCK_TYPE_ALL = 'all';
    const TRUCK_TYPE__20_FEET = '20_feet';
    const TRUCK_TYPE__40_FEET = '40_feet';
    const TRUCK_TYPE_FLAT_BED = 'flat_bed';
    const TRUCK_TYPE_GENERAL_OTHER = 'general_other';
    const TRUCK_TYPE_TAUT = 'taut';
    const TRUCK_TYPE_VAN = 'van';
    const TRUCK_TYPE_CHARGES = 'charges';
    const TRUCK_TYPE_FROZEN_FOOD = 'frozen_food';
    const TRUCK_TYPE_MULTI_TEMPERATURE = 'multi_temperature';
    const TRUCK_TYPE_NON_REFRIGERATED = 'non_refrigerated';
    const TRUCK_TYPE_GOVERNED_TEMPERATURE_OTHER = 'governed_temperature_other';
    const TRUCK_TYPE_CATEGORY_1 = 'category_1';
    const TRUCK_TYPE_CATEGORY_2 = 'category_2';
    const TRUCK_TYPE_CATEGORY_3 = 'category_3';
    const TRUCK_TYPE_CEREAL_LORRY = 'cereal_lorry';
    const TRUCK_TYPE_MOVING_BOTTOM = 'moving_bottom';
    const TRUCK_TYPE_SKIPS_OTHER = 'skips_other';
    const TRUCK_TYPE_REINFORCED = 'reinforced';
    const TRUCK_TYPE_LIQUID = 'liquid';
    const TRUCK_TYPE_TANKERS_OTHER = 'tankers_other';
    const TRUCK_TYPE_SILO = 'silo';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsHazardousProductAllowableValues()
    {
        return [
            self::IS_HAZARDOUS_PRODUCT_ALL,
            self::IS_HAZARDOUS_PRODUCT_WITH,
            self::IS_HAZARDOUS_PRODUCT_WITHOUT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGoodTypeAllowableValues()
    {
        return [
            self::GOOD_TYPE_ALL,
            self::GOOD_TYPE_BULKY_TRANSPORT,
            self::GOOD_TYPE_CONTAINERS,
            self::GOOD_TYPE_EXCEPTIONAL_TRANSPORT,
            self::GOOD_TYPE_GENERAL_MERCHANDISE,
            self::GOOD_TYPE_GOVERNED_TEMPERATURE,
            self::GOOD_TYPE_MESSAGING,
            self::GOOD_TYPE_MOVING,
            self::GOOD_TYPE_SKIPS,
            self::GOOD_TYPE_TANKERS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTruckTypeAllowableValues()
    {
        return [
            self::TRUCK_TYPE_ALL,
            self::TRUCK_TYPE__20_FEET,
            self::TRUCK_TYPE__40_FEET,
            self::TRUCK_TYPE_FLAT_BED,
            self::TRUCK_TYPE_GENERAL_OTHER,
            self::TRUCK_TYPE_TAUT,
            self::TRUCK_TYPE_VAN,
            self::TRUCK_TYPE_CHARGES,
            self::TRUCK_TYPE_FROZEN_FOOD,
            self::TRUCK_TYPE_MULTI_TEMPERATURE,
            self::TRUCK_TYPE_NON_REFRIGERATED,
            self::TRUCK_TYPE_GOVERNED_TEMPERATURE_OTHER,
            self::TRUCK_TYPE_CATEGORY_1,
            self::TRUCK_TYPE_CATEGORY_2,
            self::TRUCK_TYPE_CATEGORY_3,
            self::TRUCK_TYPE_CEREAL_LORRY,
            self::TRUCK_TYPE_MOVING_BOTTOM,
            self::TRUCK_TYPE_SKIPS_OTHER,
            self::TRUCK_TYPE_REINFORCED,
            self::TRUCK_TYPE_LIQUID,
            self::TRUCK_TYPE_TANKERS_OTHER,
            self::TRUCK_TYPE_SILO,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['products_weight_min'] = isset($data['products_weight_min']) ? $data['products_weight_min'] : null;
        $this->container['products_weight_max'] = isset($data['products_weight_max']) ? $data['products_weight_max'] : null;
        $this->container['products_length_min'] = isset($data['products_length_min']) ? $data['products_length_min'] : null;
        $this->container['products_length_max'] = isset($data['products_length_max']) ? $data['products_length_max'] : null;
        $this->container['products_volume_max'] = isset($data['products_volume_max']) ? $data['products_volume_max'] : null;
        $this->container['is_hazardous_product'] = isset($data['is_hazardous_product']) ? $data['is_hazardous_product'] : null;
        $this->container['picking_date'] = isset($data['picking_date']) ? $data['picking_date'] : null;
        $this->container['good_type'] = isset($data['good_type']) ? $data['good_type'] : null;
        $this->container['truck_type'] = isset($data['truck_type']) ? $data['truck_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getIsHazardousProductAllowableValues();
        if (!is_null($this->container['is_hazardous_product']) && !in_array($this->container['is_hazardous_product'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'is_hazardous_product', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGoodTypeAllowableValues();
        if (!is_null($this->container['good_type']) && !in_array($this->container['good_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'good_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTruckTypeAllowableValues();
        if (!is_null($this->container['truck_type']) && !in_array($this->container['truck_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'truck_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets products_weight_min
     *
     * @return float
     */
    public function getProductsWeightMin()
    {
        return $this->container['products_weight_min'];
    }

    /**
     * Sets products_weight_min
     *
     * @param float $products_weight_min products_weight_min
     *
     * @return $this
     */
    public function setProductsWeightMin($products_weight_min)
    {
        $this->container['products_weight_min'] = $products_weight_min;

        return $this;
    }

    /**
     * Gets products_weight_max
     *
     * @return float
     */
    public function getProductsWeightMax()
    {
        return $this->container['products_weight_max'];
    }

    /**
     * Sets products_weight_max
     *
     * @param float $products_weight_max products_weight_max
     *
     * @return $this
     */
    public function setProductsWeightMax($products_weight_max)
    {
        $this->container['products_weight_max'] = $products_weight_max;

        return $this;
    }

    /**
     * Gets products_length_min
     *
     * @return float
     */
    public function getProductsLengthMin()
    {
        return $this->container['products_length_min'];
    }

    /**
     * Sets products_length_min
     *
     * @param float $products_length_min products_length_min
     *
     * @return $this
     */
    public function setProductsLengthMin($products_length_min)
    {
        $this->container['products_length_min'] = $products_length_min;

        return $this;
    }

    /**
     * Gets products_length_max
     *
     * @return float
     */
    public function getProductsLengthMax()
    {
        return $this->container['products_length_max'];
    }

    /**
     * Sets products_length_max
     *
     * @param float $products_length_max products_length_max
     *
     * @return $this
     */
    public function setProductsLengthMax($products_length_max)
    {
        $this->container['products_length_max'] = $products_length_max;

        return $this;
    }

    /**
     * Gets products_volume_max
     *
     * @return float
     */
    public function getProductsVolumeMax()
    {
        return $this->container['products_volume_max'];
    }

    /**
     * Sets products_volume_max
     *
     * @param float $products_volume_max products_volume_max
     *
     * @return $this
     */
    public function setProductsVolumeMax($products_volume_max)
    {
        $this->container['products_volume_max'] = $products_volume_max;

        return $this;
    }

    /**
     * Gets is_hazardous_product
     *
     * @return string
     */
    public function getIsHazardousProduct()
    {
        return $this->container['is_hazardous_product'];
    }

    /**
     * Sets is_hazardous_product
     *
     * @param string $is_hazardous_product is_hazardous_product
     *
     * @return $this
     */
    public function setIsHazardousProduct($is_hazardous_product)
    {
        $allowedValues = $this->getIsHazardousProductAllowableValues();
        if (!is_null($is_hazardous_product) && !in_array($is_hazardous_product, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'is_hazardous_product', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['is_hazardous_product'] = $is_hazardous_product;

        return $this;
    }

    /**
     * Gets picking_date
     *
     * @return \Swagger\Client\Model\ShippingOrderSearchGlobalSearchTermsPickingDate
     */
    public function getPickingDate()
    {
        return $this->container['picking_date'];
    }

    /**
     * Sets picking_date
     *
     * @param \Swagger\Client\Model\ShippingOrderSearchGlobalSearchTermsPickingDate $picking_date picking_date
     *
     * @return $this
     */
    public function setPickingDate($picking_date)
    {
        $this->container['picking_date'] = $picking_date;

        return $this;
    }

    /**
     * Gets good_type
     *
     * @return string
     */
    public function getGoodType()
    {
        return $this->container['good_type'];
    }

    /**
     * Sets good_type
     *
     * @param string $good_type good_type
     *
     * @return $this
     */
    public function setGoodType($good_type)
    {
        $allowedValues = $this->getGoodTypeAllowableValues();
        if (!is_null($good_type) && !in_array($good_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'good_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['good_type'] = $good_type;

        return $this;
    }

    /**
     * Gets truck_type
     *
     * @return string
     */
    public function getTruckType()
    {
        return $this->container['truck_type'];
    }

    /**
     * Sets truck_type
     *
     * @param string $truck_type truck_type
     *
     * @return $this
     */
    public function setTruckType($truck_type)
    {
        $allowedValues = $this->getTruckTypeAllowableValues();
        if (!is_null($truck_type) && !in_array($truck_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'truck_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['truck_type'] = $truck_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


