/**
 * Fifty Truck API
 * This is the API of fifty truck
 *
 * OpenAPI spec version: 0.1.0
 * Contact: contact@fiftytruck.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { GeoCity } from '../model/GeoCity';
import { GeoGasStation } from '../model/GeoGasStation';
import { GeocodedAddress } from '../model/GeocodedAddress';
import { PostalAddress } from '../model/PostalAddress';
import { Route } from '../model/Route';
import { RouteWaypoint } from '../model/RouteWaypoint';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ApiGeoService {

    protected basePath = 'http://api-inte.fiftytruck.com/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Compute given route
     * 
     * @param body Array of RouteWaypoints
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public computeRoute(body: Array<RouteWaypoint>, observe?: 'body', reportProgress?: boolean): Observable<Route>;
    public computeRoute(body: Array<RouteWaypoint>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Route>>;
    public computeRoute(body: Array<RouteWaypoint>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Route>>;
    public computeRoute(body: Array<RouteWaypoint>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling computeRoute.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Route>(`${this.basePath}/geo/route/compute`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns eventually found GeoCity
     * Full text search against city database
     * @param city City name of the city to find
     * @param postcodePrefix Eventual prefix of a postcode to restrict search with
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findGeoCityByCity(city: string, postcodePrefix: string, observe?: 'body', reportProgress?: boolean): Observable<GeoCity>;
    public findGeoCityByCity(city: string, postcodePrefix: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GeoCity>>;
    public findGeoCityByCity(city: string, postcodePrefix: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GeoCity>>;
    public findGeoCityByCity(city: string, postcodePrefix: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (city === null || city === undefined) {
            throw new Error('Required parameter city was null or undefined when calling findGeoCityByCity.');
        }

        if (postcodePrefix === null || postcodePrefix === undefined) {
            throw new Error('Required parameter postcodePrefix was null or undefined when calling findGeoCityByCity.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<GeoCity>(`${this.basePath}/geo/geoCity/findByCity/${encodeURIComponent(String(city))}/postcodePrefix/${encodeURIComponent(String(postcodePrefix))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns eventually found GeoCity
     * 
     * @param postcode Postcode of the city to find
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findGeoCityByPostcode(postcode: string, observe?: 'body', reportProgress?: boolean): Observable<GeoCity>;
    public findGeoCityByPostcode(postcode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GeoCity>>;
    public findGeoCityByPostcode(postcode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GeoCity>>;
    public findGeoCityByPostcode(postcode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (postcode === null || postcode === undefined) {
            throw new Error('Required parameter postcode was null or undefined when calling findGeoCityByPostcode.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<GeoCity>(`${this.basePath}/geo/geoCity/findByPostcode/${encodeURIComponent(String(postcode))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Geocode given PostalAddress
     * 
     * @param body PostalAddress object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public geocodePostalAddress(body: PostalAddress, observe?: 'body', reportProgress?: boolean): Observable<GeocodedAddress>;
    public geocodePostalAddress(body: PostalAddress, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GeocodedAddress>>;
    public geocodePostalAddress(body: PostalAddress, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GeocodedAddress>>;
    public geocodePostalAddress(body: PostalAddress, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling geocodePostalAddress.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<GeocodedAddress>(`${this.basePath}/geo/geocodePostalAddress`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get fuel prices with gas stations
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFuelPrices(observe?: 'body', reportProgress?: boolean): Observable<Array<GeoGasStation>>;
    public getFuelPrices(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GeoGasStation>>>;
    public getFuelPrices(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GeoGasStation>>>;
    public getFuelPrices(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<GeoGasStation>>(`${this.basePath}/geo/fuelPrices`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Proxy to Google Places API
     * For more details, please see Google documentation: https://developers.google.com/places/web-service/autocomplete
     * @param input The text string on which to search. The Place Autocomplete service will return candidate matches based on this string and order results based on their perceived relevance.
     * @param offset The position, in the input term, of the last character that the service uses to match predictions.
     * @param location The point around which you wish to retrieve place information. Must be specified as latitude,longitude.
     * @param radius The distance (in meters) within which to return place results.
     * @param language The language code, indicating in which language the results should be returned, if possible.
     * @param types The types of place results to return. If no type is specified, all types will be returned.
     * @param components A grouping of places to which you would like to restrict your results.
     * @param strictbounds Returns only those places that are strictly within the region defined by location and radius.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGooglePlaces(input: string, offset?: string, location?: string, radius?: string, language?: string, types?: string, components?: string, strictbounds?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getGooglePlaces(input: string, offset?: string, location?: string, radius?: string, language?: string, types?: string, components?: string, strictbounds?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getGooglePlaces(input: string, offset?: string, location?: string, radius?: string, language?: string, types?: string, components?: string, strictbounds?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getGooglePlaces(input: string, offset?: string, location?: string, radius?: string, language?: string, types?: string, components?: string, strictbounds?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling getGooglePlaces.');
        }








        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (input !== undefined && input !== null) {
            queryParameters = queryParameters.set('input', <any>input);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (location !== undefined && location !== null) {
            queryParameters = queryParameters.set('location', <any>location);
        }
        if (radius !== undefined && radius !== null) {
            queryParameters = queryParameters.set('radius', <any>radius);
        }
        if (language !== undefined && language !== null) {
            queryParameters = queryParameters.set('language', <any>language);
        }
        if (types !== undefined && types !== null) {
            queryParameters = queryParameters.set('types', <any>types);
        }
        if (components !== undefined && components !== null) {
            queryParameters = queryParameters.set('components', <any>components);
        }
        if (strictbounds !== undefined && strictbounds !== null) {
            queryParameters = queryParameters.set('strictbounds', <any>strictbounds);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/geo/google/places`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
