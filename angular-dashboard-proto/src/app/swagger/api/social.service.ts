/**
 * Fifty Truck API
 * This is the API of fifty truck
 *
 * OpenAPI spec version: 0.1.0
 * Contact: contact@fiftytruck.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Friend } from '../model/Friend';
import { UserFriend } from '../model/UserFriend';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ApiSocialService {

    protected basePath = 'http://api-inte.fiftytruck.com/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Accept pending user friendship
     * 
     * @param myUserId User accepting the friend request
     * @param invitorUserId Accept invitation coming from this friend
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public acceptFriendRequest(myUserId: number, invitorUserId: number, observe?: 'body', reportProgress?: boolean): Observable<Friend>;
    public acceptFriendRequest(myUserId: number, invitorUserId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Friend>>;
    public acceptFriendRequest(myUserId: number, invitorUserId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Friend>>;
    public acceptFriendRequest(myUserId: number, invitorUserId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (myUserId === null || myUserId === undefined) {
            throw new Error('Required parameter myUserId was null or undefined when calling acceptFriendRequest.');
        }

        if (invitorUserId === null || invitorUserId === undefined) {
            throw new Error('Required parameter invitorUserId was null or undefined when calling acceptFriendRequest.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<Friend>(`${this.basePath}/friend/accept/user/${encodeURIComponent(String(myUserId))}/friend/${encodeURIComponent(String(invitorUserId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add new (mutual) user friendship request
     * 
     * @param body UserFriend object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addFriendRequest(body: UserFriend, observe?: 'body', reportProgress?: boolean): Observable<Friend>;
    public addFriendRequest(body: UserFriend, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Friend>>;
    public addFriendRequest(body: UserFriend, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Friend>>;
    public addFriendRequest(body: UserFriend, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addFriendRequest.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Friend>(`${this.basePath}/friend/request`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Token Provider for Pusher Chatkit
     * 
     * @param userId user id for which generate token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chatkitAuthenticate(userId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public chatkitAuthenticate(userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public chatkitAuthenticate(userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public chatkitAuthenticate(userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling chatkitAuthenticate.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<any>(`${this.basePath}/chat/auth/user/${encodeURIComponent(String(userId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete existing friendship
     * 
     * @param userId User deleting the friend request
     * @param friendUserId Delete friend relation with this (previous) friend
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteFriend(userId: number, friendUserId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteFriend(userId: number, friendUserId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteFriend(userId: number, friendUserId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteFriend(userId: number, friendUserId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteFriend.');
        }

        if (friendUserId === null || friendUserId === undefined) {
            throw new Error('Required parameter friendUserId was null or undefined when calling deleteFriend.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/friend/user/${encodeURIComponent(String(userId))}/friend/${encodeURIComponent(String(friendUserId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get User friends
     * 
     * @param userId User id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFriends(userId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Friend>>;
    public getFriends(userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Friend>>>;
    public getFriends(userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Friend>>>;
    public getFriends(userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getFriends.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Friend>>(`${this.basePath}/friends/user/${encodeURIComponent(String(userId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Refuse pending user friendship
     * 
     * @param myUserId User refusing the friend request
     * @param invitorUserId Refuse invitation coming from this (not so) friend
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public refuseFriendRequest(myUserId: number, invitorUserId: number, observe?: 'body', reportProgress?: boolean): Observable<Friend>;
    public refuseFriendRequest(myUserId: number, invitorUserId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Friend>>;
    public refuseFriendRequest(myUserId: number, invitorUserId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Friend>>;
    public refuseFriendRequest(myUserId: number, invitorUserId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (myUserId === null || myUserId === undefined) {
            throw new Error('Required parameter myUserId was null or undefined when calling refuseFriendRequest.');
        }

        if (invitorUserId === null || invitorUserId === undefined) {
            throw new Error('Required parameter invitorUserId was null or undefined when calling refuseFriendRequest.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<Friend>(`${this.basePath}/friend/refuse/user/${encodeURIComponent(String(myUserId))}/friend/${encodeURIComponent(String(invitorUserId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
